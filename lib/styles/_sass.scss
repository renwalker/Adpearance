/*-------------------------------------------

   	Global variables and mixins for SASS

   	Table of Contents:

   	1. Color Variables
   	2. Font Variables
   	3. Other Global Variables
   	4. Mixins

-------------------------------------------*/



/* ==========================================================================
	!  Color Variables
	========================================================================== */

	$poppy: #FE443E;
	$mint: #B3FED7;
	$teal: #00ADA2;
	$denim: #2B3E51;
	$onyx: #202735;
	$cloud: #E9EEF2;
	$gray: #888;


	$link-color: $teal;
	$error: #DB3A1B;
	$gray: #999;
	$body-font-color: #3b3b3b;

	$twitter: #00aced;
	$facebook: #3b5998;
	$googleplus:  #dd4b39;
	$youtube:#bb0000;
	$linkedin:#007bb6;
	$instagram: #3f729b;
	$pinterest:  #cb2027;
	$foursquare: #0072b1;
	$tumblr: #32506d;

	// $primary-color: #008CBA !default;
	// $secondary-color: #e7e7e7 !default;
	$alert-color: $error !default;
	$success-color: #5CB85C !default;
	$warning-color: #F4C13F !default;
	$info-color: #A0C3E8 !default;


/* ==========================================================================
	!  Font Variables
	========================================================================== */
	//more variable and settings in base/type
	
	$sans-serif: "soleil", "Helvetica Neue", Helvetica, Arial, sans-serif;
	$serif: "athelas", serif;
	$icon: "adpearance" !important;

	$body-font-size: 15px;
	$body-font-family: $sans-serif;
	$medium-font-size: 15px;
	$small-font-size: 14px;

	$font-smoothing: antialiased;
	$rem-base: 16px;
	

/* ==========================================================================
	!  Misc Global 
	========================================================================== */

	$global-radius: 8px;

/* ==========================================================================
	!  Foundation 
	========================================================================== */
	
	$namespace: false !default;
	$experimental: true !default;
	$global-radius: 4px !default;

	$modules: () !default;
	@mixin exports($name) {
		@if (index($modules, $name) == false) {
			$modules: append($modules, $name);
			@content;
		}
	}

	// FUNCTIONS
	@function lower-bound($range){
		@if length($range) <= 0 {
			@return 0;
			}
		@return nth($range,1);
	}

	@function upper-bound($range) {
		@if length($range) < 2 {
			@return 999999999999;
		}
		@return nth($range, 2);
	}

	@function strip-unit($num) {
		@return $num / ($num * 0 + 1);
	}

	// Convert to REM
	@function convert-to-rem($value, $base-value: $rem-base)  {
		$value: strip-unit($value) / strip-unit($base-value) * 1rem;
		@if ($value == 0rem) { $value: 0; }
		@return $value;
	}

	@function data($attr) {
		@if $namespace {
			@return '[data-' + $namespace + '-' + $attr + ']';
		}
		@return '[data-' + $attr + ']';
	}

	// Space delimited:
	// rem-calc(10 20 30px 40);
	// Using comma's, wrap in pair of brackets:
	//   rem-calc((10, 20, 30, 40px));
	@function rem-calc($values, $base-value: $rem-base) {
		$max: length($values);
		@if $max == 1 { @return convert-to-rem(nth($values, 1), $base-value); }
		$remValues: ();
		@for $i from 1 through $max {
			$remValues: append($remValues, convert-to-rem(nth($values, $i), $base-value))
		}
		@return $remValues;
	}


/* ==========================================================================
	!  Responsive Breakpoints
	========================================================================== */

	$small-range: (0em, 40em) !default;
	$medium-range: (40.063em, 64em) !default;
	$large-range: (64.063em, 90em) !default;
	$xlarge-range: (90.063em, 120em) !default;
	$xxlarge-range: (120.063em) !default;

	$screen: "only screen" !default;

	$landscape: "#{$screen} and (orientation: landscape)" !default;
	$portrait: "#{$screen} and (orientation: portrait)" !default;

	$small-up: $screen !default;
	$small-only: "#{$screen} and (max-width: #{upper-bound($small-range)})" !default;
	$medium-up: "#{$screen} and (min-width:#{lower-bound($medium-range)})" !default;
	$medium-only: "#{$screen} and (min-width:#{lower-bound($medium-range)}) and (max-width:#{upper-bound($medium-range)})" !default;
	$large-up: "#{$screen} and (min-width:#{lower-bound($large-range)})" !default;
	$large-only: "#{$screen} and (min-width:#{lower-bound($large-range)}) and (max-width:#{upper-bound($large-range)})" !default;
	$xlarge-up: "#{$screen} and (min-width:#{lower-bound($xlarge-range)})" !default;
	$xlarge-only: "#{$screen} and (min-width:#{lower-bound($xlarge-range)}) and (max-width:#{upper-bound($xlarge-range)})" !default;
	$xxlarge-up: "#{$screen} and (min-width:#{lower-bound($xxlarge-range)})" !default;
	$xxlarge-only: "#{$screen} and (min-width:#{lower-bound($xxlarge-range)}) and (max-width:#{upper-bound($xxlarge-range)})" !default;


	meta.foundation-mq-small {
		font-family: "/" + unquote($small-only) + "/";
		width: lower-bound($small-range);
	}

	meta.foundation-mq-medium {
		font-family: "/" + unquote($medium-only) + "/";
		width: lower-bound($medium-range);
	}

	meta.foundation-mq-large {
		font-family: "/" + unquote($large-up) + "/";
		width: lower-bound($large-range);
	}

	meta.foundation-mq-xlarge {
		font-family: "/" + unquote($xlarge-up) + "/";
		width: lower-bound($xlarge-range);
	}

	meta.foundation-mq-xxlarge {
		font-family: "/" + unquote($xxlarge-up) + "/";
		width: lower-bound($xxlarge-range);
	}



	/* ==========================================================================
	!  More Mixins

		Important:
			Many mixins that work with vendor prefixes are included with Compass.  For full documentation, view
			http://compass-style.org/reference/compass/.

	========================================================================== */

	@mixin icon {
		font-family:$icon;
		font-style: normal !important;
		font-weight: normal !important;
		font-variant: normal !important;
		text-transform: none !important;
		speak: none;
		line-height: 1;
	}

	@mixin vertical-align {
		position: relative;
		top: 50%;
		transform: translateY(-50%);
	}


	@mixin side-radius($side, $radius:$global-radius) {
		@if ($side == left or $side == right) {
			border-bottom-#{$side}-radius: $radius;
			border-top-#{$side}-radius: $radius;
		} @else {
			border-#{$side}-left-radius: $radius;
			border-#{$side}-right-radius: $radius;
		}
	}

	// Add transitions to elements
	@mixin single-transition($property:all, $speed:400ms, $ease:cubic-bezier(0.7,0,0.3,1)) {
		transition-property: $property;
		transition-duration: $speed;
		transition-timing-function: $ease;
	}

	// We use this to do clear floats
	@mixin clearfix() {
		*zoom:1;
		&:before, &:after { content: " "; display: table; }
		&:after { clear: both; }
	}

	// Create equalateral triangles
	@mixin triangle($triangle-size, $triangle-color, $triangle-direction) {
		content: "";
		display: block;
		width: 0;
		height: 0;
		border: inset $triangle-size;
		@if ($triangle-direction == top) {
			border-color: $triangle-color transparent transparent transparent;
			border-top-style: solid;
		}
		@if ($triangle-direction == bottom) {
			border-color: transparent transparent $triangle-color transparent;
			border-bottom-style: solid;
		}
		@if ($triangle-direction == left) {
			border-color: transparent transparent transparent $triangle-color;
			border-left-style: solid;
		}
		@if ($triangle-direction == right) {
			border-color: transparent $triangle-color transparent transparent;
			border-right-style: solid;
		}
	}

	// Note this only applies to webkit-based desktop browsers and Firefox 25 (and later) on the Mac.
	@mixin antialias() {
		-webkit-font-smoothing: antialiased; 
		-moz-osx-font-smoothing: grayscale;
	}


	


